---
import "../styles/global.css";
import AccessMenu from "../components/AccessMenu.astro";
import Footer from "../components/Footer.astro";

const pageTitle = "welcome in!";
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            href="https://fonts.googleapis.com/css2?family=Eczar:wght@400..800&display=swap"
            rel="stylesheet"
        />
        <title>{pageTitle} | entropically</title>
    </head>
    <body class="splash">
        <AccessMenu />
        <div id="page-container">
            <h1 id="splash-title">entropically</h1>
            <main class="splash">
                <img class="centered" src="/public/img/makebadart.png" alt="A sparkly, Blingee-like image overloaded with colors and clipart of butterflies, hearts, and Hello Kitty. At the center it says 'make bad art' in rainbow lettering.">
                <div class="box centered splash margin-top-2rem">
                    <h2 class="accent-color-1">welcome to vance's silly little internet corner!</h2>
                    <p>please use the accessibility menu in the top right corner to set your preferences; they will be saved in your local browser cache.</p>
                    <p class="large-accent-text"><a href="/home">enter</a></p>
                </div>
            </main>
            <Footer />
        </div>
        <script>
            import "../scripts/menu.js";
            import "../scripts/font.js";
        </script>
        <script type="text/javascript" is:inline id="cursor-script">
            // Cursor sparkles effect by RV: http://www.mf2fm.com/rv/dhtmltinkerbell.php

            // Note: script only works when inline, for some reason

            // this function modified from example in Astro docs:
            // https://docs.astro.build/en/tutorial/6-islands/2/#add-client-side-interactivity
            let animateCursor = (() => {
                const localStorageCursor =
                    localStorage?.getItem("animate-cursor") ?? "true";
                if (localStorageCursor === "true") {
                    return true;
                } else if (localStorageCursor === "false") {
                    return false;
                }
                if (
                    window.matchMedia("(prefers-reduced-motion: reduce)")
                        .matches
                ) {
                    return false;
                }
                return true;
            })();

            if (animateCursor) {
                document.querySelector("#access-cursor").textContent =
                    "disable cursor animation";
            } else {
                console.log("animate cursor false");
                document.querySelector("#access-cursor").textContent =
                    "enable cursor animation";
            }

            // <![CDATA[
            var colour = "random"; // in addition to "random" can be set to any valid colour eg "#f0f" or "red"
            var sparkles = 50;

            /****************************
             *  Tinkerbell Magic Sparkle *
             *(c)2005-13 mf2fm web-design*
             *  http://www.mf2fm.com/rv  *
             * DON'T EDIT BELOW THIS BOX *
             ****************************/
            var x = (ox = 400);
            var y = (oy = 300);
            var swide = 800;
            var shigh = 600;
            var sleft = (sdown = 0);
            var tiny = new Array();
            var star = new Array();
            var starv = new Array();
            var starx = new Array();
            var stary = new Array();
            var tinyx = new Array();
            var tinyy = new Array();
            var tinyv = new Array();

            window.onload = function () {
                if (document.getElementById && animateCursor) {
                    var i, rats, rlef, rdow;
                    for (var i = 0; i < sparkles; i++) {
                        var rats = createDiv(3, 3);
                        rats.style.visibility = "hidden";
                        rats.style.zIndex = "999";
                        document.body.appendChild((tiny[i] = rats));
                        starv[i] = 0;
                        tinyv[i] = 0;
                        var rats = createDiv(5, 5);
                        rats.style.backgroundColor = "transparent";
                        rats.style.visibility = "hidden";
                        rats.style.zIndex = "999";
                        var rlef = createDiv(1, 5);
                        var rdow = createDiv(5, 1);
                        rats.appendChild(rlef);
                        rats.appendChild(rdow);
                        rlef.style.top = "2px";
                        rlef.style.left = "0px";
                        rdow.style.top = "0px";
                        rdow.style.left = "2px";
                        document.body.appendChild((star[i] = rats));
                    }
                    set_width();
                    sparkle();
                }
            };

            function sparkle() {
                var c;
                if (Math.abs(x - ox) > 1 || Math.abs(y - oy) > 1) {
                    ox = x;
                    oy = y;
                    for (c = 0; c < sparkles; c++)
                        if (!starv[c]) {
                            star[c].style.left = (starx[c] = x) + "px";
                            star[c].style.top = (stary[c] = y + 1) + "px";
                            star[c].style.clip = "rect(0px, 5px, 5px, 0px)";
                            star[c].childNodes[0].style.backgroundColor = star[
                                c
                            ].childNodes[1].style.backgroundColor =
                                colour == "random" ? newColour() : colour;
                            star[c].style.visibility = "visible";
                            starv[c] = 50;
                            break;
                        }
                }
                for (c = 0; c < sparkles; c++) {
                    if (starv[c]) update_star(c);
                    if (tinyv[c]) update_tiny(c);
                }
                setTimeout("sparkle()", 40);
            }

            function update_star(i) {
                if (--starv[i] == 25)
                    star[i].style.clip = "rect(1px, 4px, 4px, 1px)";
                if (starv[i]) {
                    stary[i] += 1 + Math.random() * 3;
                    starx[i] += ((i % 5) - 2) / 5;
                    if (stary[i] < shigh + sdown) {
                        star[i].style.top = stary[i] + "px";
                        star[i].style.left = starx[i] + "px";
                    } else {
                        star[i].style.visibility = "hidden";
                        starv[i] = 0;
                        return;
                    }
                } else {
                    tinyv[i] = 50;
                    tiny[i].style.top = (tinyy[i] = stary[i]) + "px";
                    tiny[i].style.left = (tinyx[i] = starx[i]) + "px";
                    tiny[i].style.width = "2px";
                    tiny[i].style.height = "2px";
                    tiny[i].style.backgroundColor =
                        star[i].childNodes[0].style.backgroundColor;
                    star[i].style.visibility = "hidden";
                    tiny[i].style.visibility = "visible";
                }
            }

            function update_tiny(i) {
                if (--tinyv[i] == 25) {
                    tiny[i].style.width = "1px";
                    tiny[i].style.height = "1px";
                }
                if (tinyv[i]) {
                    tinyy[i] += 1 + Math.random() * 3;
                    tinyx[i] += ((i % 5) - 2) / 5;
                    if (tinyy[i] < shigh + sdown) {
                        tiny[i].style.top = tinyy[i] + "px";
                        tiny[i].style.left = tinyx[i] + "px";
                    } else {
                        tiny[i].style.visibility = "hidden";
                        tinyv[i] = 0;
                        return;
                    }
                } else tiny[i].style.visibility = "hidden";
            }

            document.onmousemove = mouse;
            function mouse(e) {
                if (e) {
                    y = e.pageY;
                    x = e.pageX;
                } else {
                    set_scroll();
                    y = event.y + sdown;
                    x = event.x + sleft;
                }
            }

            window.onscroll = set_scroll;
            function set_scroll() {
                if (typeof self.pageYOffset == "number") {
                    sdown = self.pageYOffset;
                    sleft = self.pageXOffset;
                } else if (
                    document.body &&
                    (document.body.scrollTop || document.body.scrollLeft)
                ) {
                    sdown = document.body.scrollTop;
                    sleft = document.body.scrollLeft;
                } else if (
                    document.documentElement &&
                    (document.documentElement.scrollTop ||
                        document.documentElement.scrollLeft)
                ) {
                    sleft = document.documentElement.scrollLeft;
                    sdown = document.documentElement.scrollTop;
                } else {
                    sdown = 0;
                    sleft = 0;
                }
            }

            window.onresize = set_width;
            function set_width() {
                var sw_min = 999999;
                var sh_min = 999999;
                if (
                    document.documentElement &&
                    document.documentElement.clientWidth
                ) {
                    if (document.documentElement.clientWidth > 0)
                        sw_min = document.documentElement.clientWidth;
                    if (document.documentElement.clientHeight > 0)
                        sh_min = document.documentElement.clientHeight;
                }
                if (typeof self.innerWidth == "number" && self.innerWidth) {
                    if (self.innerWidth > 0 && self.innerWidth < sw_min)
                        sw_min = self.innerWidth;
                    if (self.innerHeight > 0 && self.innerHeight < sh_min)
                        sh_min = self.innerHeight;
                }
                if (document.body.clientWidth) {
                    if (
                        document.body.clientWidth > 0 &&
                        document.body.clientWidth < sw_min
                    )
                        sw_min = document.body.clientWidth;
                    if (
                        document.body.clientHeight > 0 &&
                        document.body.clientHeight < sh_min
                    )
                        sh_min = document.body.clientHeight;
                }
                if (sw_min == 999999 || sh_min == 999999) {
                    sw_min = 800;
                    sh_min = 600;
                }
                swide = sw_min;
                shigh = sh_min;
            }

            function createDiv(height, width) {
                var div = document.createElement("div");
                div.style.position = "absolute";
                div.style.height = height + "px";
                div.style.width = width + "px";
                div.style.overflow = "hidden";
                return div;
            }

            function newColour() {
                var c = new Array();
                // vae's edit: random * 128 + 128 to make it pastel
                c[0] = Math.floor(Math.random() * 128 + 128);
                c[1] = Math.floor(Math.random() * 128 + 128);
                c[2] = Math.floor(Math.random() * 128 + 128);
                // c[2] = Math.floor(Math.random() * (256 - c[1] / 2));
                c.sort(function () {
                    return 0.5 - Math.random();
                });
                return "rgb(" + c[0] + ", " + c[1] + ", " + c[2] + ")";
            }
            // ]]>
        </script>
    </body>
</html>
